---
import Hero from '../components/Hero.astro';
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import Blackbars from '../components/Blackbars.astro';
import Footer_Home from '../components/Footer_Home.astro';
import Preloader from '../components/Preloader.astro';

---

<Layout>
	<link rel="stylesheet" href="/css/home.css">
	<!-- <script>
		(function () {
			var script = document.createElement("script");
			script.src = "https://cdn.jsdelivr.net/npm/eruda";
			script.onload = function () {
				eruda.init();
			};
			document.body.appendChild(script);
		})();
		</script> -->

			
				<!-- <script>
					// Set para almacenar las URLs de archivos ya cargados
					const loadedFiles = new Set();
			
					// Funci√≥n para verificar y eliminar archivos duplicados (antes de descargarlos)
					function interceptFile(element, type) {
						if (!element.src) return;
			
						const url = new URL(element.src, window.location.origin).href;
			
						// Si la URL ya est√° en el Set, impedir la carga
						if (loadedFiles.has(url)) {
							console.log(`üö´ Bloqueado antes de descargar (${type} duplicado): ${url}`);
							element.remove();
							return;
						}
			
						// Agregar al Set si es un archivo nuevo
						loadedFiles.add(url);
						console.log(`‚úÖ Primera carga (${type}): ${url}`);
					}
			
					// Funci√≥n para interceptar cambios en `src`
					function interceptAttributeChanges(element, type) {
						const originalSetAttribute = element.setAttribute;
			
						element.setAttribute = function (attr, value) {
							if (attr === "src" && value) {
								const url = new URL(value, window.location.origin).href;
			
								if (loadedFiles.has(url)) {
									console.log(`üö´ Bloqueado antes de descargar (setAttribute - ${type}): ${url}`);
									return; // Bloquea la asignaci√≥n del `src`
								}
			
								loadedFiles.add(url);
								console.log(`‚úÖ Primera carga (setAttribute - ${type}): ${url}`);
							}
			
							originalSetAttribute.apply(this, arguments);
						};
					}
			
					// Aplicar la verificaci√≥n a archivos ya presentes en el DOM
					function processExistingFiles() {
						document.querySelectorAll('img[src$=".webp"], img[src$=".svg"]').forEach(img => {
							interceptFile(img, "Imagen");
							interceptAttributeChanges(img, "Imagen");
						});
			
						document.querySelectorAll('video source[src$=".webm"], video source[src$=".mp4"]').forEach(source => {
							interceptFile(source, "Video");
							interceptAttributeChanges(source, "Video");
						});
					}
			
					// Observer para detectar archivos agregados din√°micamente
					const observer = new MutationObserver(mutations => {
						mutations.forEach(mutation => {
							mutation.addedNodes.forEach(node => {
								if (node.tagName === 'IMG' && (node.src.endsWith(".webp") || node.src.endsWith(".svg"))) {
									interceptFile(node, "Imagen");
									interceptAttributeChanges(node, "Imagen");
								}
			
								if (node.tagName === 'SOURCE' && (node.src.endsWith(".webm") || node.src.endsWith(".mp4"))) {
									interceptFile(node, "Video");
									interceptAttributeChanges(node, "Video");
								}
							});
						});
					});
			
					observer.observe(document.body, { childList: true, subtree: true });
			
					// Ejecutar la funci√≥n al inicio para archivos existentes
					processExistingFiles();
				</script> -->
			
			</body>
			</html>
			
		
		
		</body>
		</html>
		
		
		
		
		

	<Preloader />
	<!-- <Blackbars /> -->
	<Navbar />
	<Hero />
	<Footer_Home />
</Layout>
